---
title: "Influenza A H7N9 in China, 2013"
format: dashboard
theme: lux
---

```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, outbreaks, bslib, bsicons, shiny, 
               rgeoboundaries, plotly, htmltools, reactable)

# view data
head(outbreaks::fluH7N9_china_2013)
```


```{r}
total_cases<- outbreaks::fluH7N9_china_2013 %>% 
  summarise(total_cases = n())


total_hospitalizations<-outbreaks::fluH7N9_china_2013 %>%
  filter(!is.na(date_of_hospitalisation)) %>% 
  summarise(total_hospitalization = n())


total_deaths <- outbreaks::fluH7N9_china_2013 %>%
  filter(outcome=="Death") %>% 
  summarise(total_deaths = n())
```

```{r}
province_summary1 <- outbreaks::fluH7N9_china_2013 %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) %>%  
  arrange(desc(total_cases)) %>% 
  #head(20) %>% 
  mutate(tooltip_label = paste(province, 
                               round(total_cases, 1), 
                               sep = ": ")) %>% 
  ggplot(aes(y = reorder(province, total_cases), 
             x = total_cases, 
             fill = total_cases, 
             text = tooltip_label)) + 
  geom_col() + 
  geom_text(aes(label = round(total_cases, 1)), 
            nudge_x = -10, 
            color = "white"
            ) + 
  labs(y = "Province", 
       x = "Total Cases") + 
  theme(legend.position = "none")

province_summary_ggplotly <- 
  ggplotly(province_summary1, tooltip = "text")

province_summary1
```

```{r}
### MAP OF CASES PER PROVINCE
province_summary <- fluH7N9_china_2013 %>% 
  group_by(province) %>% 
  summarise(total_cases = n()) 

china_map <- rgeoboundaries::gb_adm1("china")

# Check the keys to see if join will be successful
setdiff(province_summary$province, china_map$shapeName)
setdiff(china_map$shapeName, province_summary$province)
# Some work to be done to harmonize these

china_map <- china_map %>%
  # Remove the strings Province, Municipality and Autonomous Region 
  # to allow matching
  mutate(province = str_trim(
    str_remove(shapeName, "Province|Municipality|Autonomous Region")
  ))

# Check if join will work fine
setdiff(province_summary$province, china_map$province)

# Fix Guangdong, which based on a quick Google is actually Guangzhou
china_map <- china_map %>% 
  mutate(province = if_else(province == "Guangzhou", "Guangdong", province)) 
  
# Check again
setdiff(province_summary$province, china_map$province)

# Now join
china_map_joined <- 
  left_join(china_map, province_summary, by = "province") %>% 
  # Create tooltip label 
  mutate(tooltip_label = paste0(province, ": ", total_cases))

china_map_plot <- ggplot(china_map_joined) +
  geom_sf(aes(fill = total_cases, text = tooltip_label)) + 
  theme_void() +
  labs(fill = "Number of Cases") + 
  theme(legend.position = "none")

china_map_plot_ggplotly <- 
  ggplotly(china_map_plot, tooltip = "text")

```

```{r}
china_map_plot_ggplotly
```

```{r}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(htmltools, reactable, gapminder)

htmltools::browsable(
  tagList(
    reactable(gapminder, 
              elementId = "gapminder-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('gapminder-table')")
  )
)
```



# HOME 

## Row1 {height=20%}

```{r}
value_box(
  title = "Total Cases",
  value = total_cases,
  #showcase = bsicons::bs_icon("covid virus"),
  theme = value_box_theme(bg = "#518fd6")#,
  #p(paste0("(", highest_life_exp_country, ")"))
)
```


```{r}
value_box(
  title = "Total Hospitalizations",
  value = total_hospitalizations,
 # showcase = bsicons::bs_icon("hospital"),
  theme = value_box_theme(bg = "#214773")#,
  #p(paste0("(", lowest_life_exp_country, ")"))
)
```

```{r}
value_box(
  title = "Total deaths",
  value = total_deaths,
  #showcase = bsicons::bs_icon("clipchart"),
  theme = value_box_theme(bg = "#3f71ab")
)
```


## Row2 {height=75%}

### {width=30%}
```{r}
province_summary_ggplotly
```


###
```{r}
china_map_plot_ggplotly
```


# DOWNLOAD DATA

```{r}
library(htmltools)

htmltools::browsable(
  tagList(
    reactable(gapminder, 
              elementId = "gapminder-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('gapminder-table')")
  )
)
```

